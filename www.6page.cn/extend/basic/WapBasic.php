<?php



namespace basic;


use app\wap\model\user\User;
use app\wap\model\user\WechatUser;
use behavior\wap\WapBehavior;
use service\JsonService;
use service\SystemConfigService;
use think\Controller;
use behavior\wechat\UserBehavior;
use service\HookService;
use service\UtilService;
use service\WechatService;
use service\WechatSubscribe;
use think\Cookie;
use think\Request;
use think\Session;
use think\Url;

class WapBasic extends Controller
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $spreadUid = Request::instance()->route('spuid',0);
        if($spreadUid
            && ($userInfo = User::getUserInfo(WechatUser::openidToUid($this->oauth())))
            && !$userInfo['spread_uid']
            && $userInfo['uid'] != $spreadUid
        ) User::edit(['spread_uid'=>$spreadUid],$userInfo['uid'],'uid');
        HookService::listen('wap_init',null,null,false,WapBehavior::class);
        $slide_captcha = SystemConfigService::get('slide_captcha');
        $site_url = SystemConfigService::get('site_url');
        $site_favicon = SystemConfigService::get('site_favicon');
        $login_types = SystemConfigService::get('login_types');
        $this->assign([
            'm_home_url' => url('/m'),
            // 是否开启微信登录
            'wechat_login' => SystemConfigService::get('wechat_login'),
            // 是否开启滑块验证码
            'slide_captcha' => $slide_captcha ? 1 : 0,
            'site_favicon' => $site_favicon,
            'login_types' => $login_types ? $login_types : 1,
            'slide_captcha_api' => $site_url
        ]);
        $this->mHomeUrl = url('/m');
    }

    /**
     * 操作失败 弹窗提示
     * @param string $msg
     * @param int $url
     * @param string $title
     */
    protected function failed($msg = '操作失败', $url = 0, $title='信息提示')
    {

        if($this->request->isAjax()){
            exit(JsonService::fail($msg,$url)->getContent());
        }else {
            $this->assign(compact('title', 'msg', 'url'));
            exit($this->fetch('public/error'));
        }
    }

    /**
     * 操作成功 弹窗提示
     * @param $msg
     * @param int $url
     */
    protected function successful($msg = '操作成功', $url = 0, $title='成功提醒')
    {
        if($this->request->isAjax()){
            exit(JsonService::successful($msg,$url)->getContent());
        }else {
            $this->assign(compact('title', 'msg', 'url'));
            exit($this->fetch('public/success'));
        }
    }

    public function _empty($name)
    {
        $url = strtolower($name) == 'index' ? Url::build('/m','',true,true) : 0;
        return $this->failed('请求页面不存在!',$url);
    }

    /**判断redis状态
     * @param $msg
     */
    public function serRedisPwd($msg){
        if(strpos($msg,'username-password pair') !==false){
            return $this->failed('请检查redis密码!','https://www.5usujian.com');
        }elseif (strpos($msg,'Connection refused') !==false){
            return $this->failed('请安装redis软件或连接被拒绝!');
        }elseif (strpos($msg,'NOAUTH Authentication required') !==false){
            return $this->failed('redis认证错误!','https://www.5usujian.com');
        }elseif (strpos($msg,'not support: redis') !==false){
            return $this->failed('请安装redis扩展!','https://www.5usujian.com');
        }else{
            return $this->failed('请设置redis密码!','https://www.5usujian.com');
        }
    }
    /**
     * 微信用户自动登陆
     * @return string $openid
     */
    protected function oauth($spread_uid=0)
    {
        $openid = Session::get('loginOpenid','wap');
        if($openid) return $openid;
        if(!UtilService::isWechatBrowser()) exit($this->failed('请在微信客户端打开链接'));
        if($this->request->isAjax()) exit($this->failed('请登陆!'));
        $errorNum = (int)Cookie::get('_oen');
        if($errorNum && $errorNum > 3) exit($this->failed('微信用户信息获取失败!!'));
        try{
            $original=WechatService::oauthService()->getAccessToken($this->request->get('code'));
            if (!WechatUser::be(['openid' => $original->openid]) && $original->scope === 'snsapi_base'){
                exit(WechatService::oauthService()->scopes(['snsapi_userinfo'])
                    ->redirect($this->request->url(true))->send());
            }
            $wechatInfo=WechatSubscribe::baseParseGet($original->access_token,$original->openid);//获取单个用户信息
            if(isset($wechatInfo['errcode']) && $wechatInfo['errcode']==48001){
                exit(WechatService::oauthService()->scopes(['snsapi_userinfo'])
                    ->redirect($this->request->url(true))->send());
            }
        }catch (\Exception $e){
            Cookie::set('_oen',++$errorNum,900);
            exit(WechatService::oauthService()->scopes(['snsapi_base'])
                ->redirect($this->request->url(true))->send());
        }
        if(!isset($wechatInfo['nickname']) || $wechatInfo['nickname']==''){
            exit(WechatService::oauthService()->scopes(['snsapi_userinfo'])
                ->redirect($this->request->url(true))->send());
        }
        if(isset($wechatInfo['openid']) && $wechatInfo['openid']){
            $wechatInfoData = WechatService::getUserInfo($wechatInfo['openid']);
            $wechatInfo['subscribe'] =$wechatInfoData['subscribe'];
            $wechatInfo['subscribe_time'] =$wechatInfoData['subscribe_time'];
            $wechatInfo['groupid'] =$wechatInfoData['groupid'];
            if(isset($wechatInfoData['tagid_list'])) $wechatInfo['tagid_list'] = implode(',',$wechatInfoData['tagid_list']);
        }else{
            if(isset($wechatInfo['privilege'])) unset($wechatInfo['privilege']);
            if (!WechatUser::be(['openid' => $wechatInfo['openid']])) $wechatInfo['subscribe'] = 0;
        }
        Cookie::delete('_oen');
        $openid = $wechatInfo['openid'];
        $wechatInfo['spread_uid']=$spread_uid;
        HookService::afterListen('wechat_oauth',$openid,$wechatInfo,false,UserBehavior::class);
        return $openid;
    }
    /**
     * 微信用户自动登陆
     * @return string $openid
     */
    protected function oauthV2($spread_uid=0)
    {
        $openid = Session::get('__login_openid','web');
        if($openid) return $openid;
        if(!UtilService::isWechatBrowser()) exit($this->failed('请在微信客户端打开链接'));
        if($this->request->isAjax()) exit($this->failed('请登陆!'));
        $errorNum = (int)Cookie::get('_oen');
        if($errorNum && $errorNum > 3) exit($this->failed('微信用户信息获取失败!!'));
        try{
            $original=WechatService::oauthService()->getAccessToken($this->request->get('code'));
            if (!WechatUser::be(['openid' => $original->openid]) && $original->scope === 'snsapi_base'){
                exit(WechatService::oauthService()->scopes(['snsapi_userinfo'])
                    ->redirect($this->request->url(true))->send());
            }
            $wechatInfo=WechatSubscribe::baseParseGet($original->access_token,$original->openid);//获取单个用户信息
            if(isset($wechatInfo['errcode']) && $wechatInfo['errcode']==48001){
                exit(WechatService::oauthService()->scopes(['snsapi_userinfo'])
                    ->redirect($this->request->url(true))->send());
            }
        }catch (\Exception $e){
            Cookie::set('_oen',++$errorNum,900);
            exit(WechatService::oauthService()->scopes(['snsapi_base'])
                ->redirect($this->request->url(true))->send());
        }
        if(!isset($wechatInfo['nickname']) || $wechatInfo['nickname']==''){
            exit(WechatService::oauthService()->scopes(['snsapi_userinfo'])
                ->redirect($this->request->url(true))->send());
        }
        if(isset($wechatInfo['openid']) && $wechatInfo['openid']){
            $wechatInfoData = WechatService::getUserInfo($wechatInfo['openid']);
            $wechatInfo['subscribe'] =$wechatInfoData['subscribe'];
            $wechatInfo['subscribe_time'] =$wechatInfoData['subscribe_time'];
            $wechatInfo['groupid'] =$wechatInfoData['groupid'];
            if(isset($wechatInfoData['tagid_list'])) $wechatInfo['tagid_list'] = implode(',',$wechatInfoData['tagid_list']);
        }else{
            if(isset($wechatInfo['privilege'])) unset($wechatInfo['privilege']);
            if (!WechatUser::be(['openid' => $wechatInfo['openid']])) $wechatInfo['subscribe'] = 0;
        }
        Cookie::delete('_oen');
        $openid = $wechatInfo['openid'];
        if (!WechatUser::be(['openid' => $openid])) {
//            exit($this->failed('登陆账号不存在!!'));
            $userInfo=User::setWechatUser($wechatInfo,$spread_uid);
            WechatUser::setNewUserInfo($userInfo);
        }

        $wechatUser = WechatUser::where('openid', $openid)->find();
        $userinfo = \app\web\model\user\User::where('uid', $wechatUser['uid'])->find();
        if(!$userinfo){
            exit($this->fail('账号异常!'));
        };

        Session::set('loginUid', $userinfo['uid'], 'web');

        $wechatInfo['spread_uid']=$spread_uid;
        HookService::afterListen('wechat_oauth',$openid,$wechatInfo,false,UserBehavior::class);

        Session::delete('login_error_info', 'web');
        Cookie::set('is_login', 1, 86400);
        Cookie::set('__login_openid', $openid, 86400);
        Session::set('__login_openid_number', $openid, 'web');

        return $openid;
    }

}
